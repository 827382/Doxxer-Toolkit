# English version --
import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCByYW5kb20KaW1wb3J0IHB5c2hvcnRlbmVycwppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHB5cXJjb2RlCmltcG9ydCBwbmcKZnJvbSBmYWtlciBpbXBvcnQgRmFrZXIKZnJvbSB0aW1lIGltcG9ydCBzbGVlcAppbXBvcnQgd2ViYnJvd3NlcgoKVmVyc2lvbiA9ICIyLjMiCgpjbGFzcyBDb2xvcmVzOgogIHJlZD0iXDAzM1szMTsxbSIKICB2ZXJkZT0iXDAzM1s5Mm0iCiAgYXp1bD0iXDAzM1s5NG0iCiAgbWFnZW50YT0iXDAzM1szNm0iCiAgYW1hcmlsbG89IlwwMzNbMzNtIgogIAoKb3Muc3lzdGVtKCJraWxsYWxsIHBocCIpCm9zLnN5c3RlbSgiY2xlYXIiKQpyYW5kb21jb2xvcj1bQ29sb3Jlcy5yZWQsQ29sb3Jlcy52ZXJkZSxDb2xvcmVzLmF6dWwsQ29sb3Jlcy5tYWdlbnRhXQojcmFuZG9tLnNodWZmbGUocmFuZG9tY29sb3IpCmxvZ28gPSBDb2xvcmVzLnJlZCArICcnJwrCt+KWhOKWhOKWhOKWhCAgICAgICAg4paQ4paE4oCiIOKWhCDilpDiloTigKIg4paEIOKWhOKWhOKWhCAu4paE4paE4paEICAgICAg4paE4paE4paE4paE4paEICAgICAgICAgICAg4paE4paE4paMICDiloQg4oCi4paEIOKWqiAg4paE4paE4paE4paE4paECuKWiOKWiOKWqiDilojilogg4paqICAgICAg4paI4paM4paI4paM4paqIOKWiOKWjOKWiOKWjOKWquKWgOKWhC7iloDCt+KWgOKWhCDilojCtyAgICDigKLilojiloggIOKWqiAgICAg4paqICAgICDilojilojigKIgIOKWiOKWjOKWhOKWjOKWquKWiOKWiCDigKLilojiloggIArilpDilojCtyDilpDilojilowg4paE4paI4paA4paEICDCt+KWiOKWiMK3ICDCt+KWiOKWiMK3IOKWkOKWgOKWgOKWquKWhOKWkOKWgOKWgOKWhCAgICAgIOKWkOKWiC7ilqog4paE4paI4paA4paEICDiloTilojiloDiloQg4paI4paI4paqICDilpDiloDiloDiloTCt+KWkOKWiMK3IOKWkOKWiC7ilqoK4paI4paILiDilojilogg4paQ4paI4paMLuKWkOKWjOKWquKWkOKWiMK34paI4paM4paq4paQ4paIwrfilojilozilpDilojiloTiloTilozilpDilojigKLilojilowgICAgIOKWkOKWiOKWjMK34paQ4paI4paMLuKWkOKWjOKWkOKWiOKWjC7ilpDilozilpDilojilozilpDilozilpDilogu4paI4paM4paQ4paI4paMIOKWkOKWiOKWjMK3CuKWgOKWgOKWgOKWgOKWgOKAoiAg4paA4paI4paE4paA4paq4oCi4paA4paAIOKWgOKWgOKAouKWgOKWgCDiloDiloAg4paA4paA4paAIC7iloAgIOKWgCAgICAg4paA4paA4paAICDiloDilojiloTiloDilqog4paA4paI4paE4paA4paqLuKWgOKWgOKWgCDCt+KWgCAg4paA4paA4paA4paAIOKWgOKWgOKWgCAKICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIEJ5OiAgRXVyb255bW91NQogICAgICAgICAgICAgICAgICAgIF9fX19fX19fX19fX19fXwoKICAgICAgICAgICAgICAgICAgICAgVmVyc2lvbjogdjIuMwogICAgICAgICAgICAgICAgICAgICBfX19fX19fX19fX19fCicnJwoKCgpkZWYgc2hlcigpOgogIG9zLnN5c3RlbSgiY2xlYXIiKQogIHByaW50KGxvZ28pCiAgcHJpbnQoJ1xuWzFdIFNlYXJjaCB3aXRoIERveHhlciBUb29sa2l0JykKICBwcmludCgnWzJdIFNoZXJsb2NrIChQcm9ncmFtKScpCiAgcHJpbnQoJ1szXSBOZXhmaWwgKFByb2dyYW0pJykKICBwcmludCgnWzRdIEJhc2ljIHNlYXJjaCB3aXRoIHNvY2lhbHNjYW4nKQogIHByaW50KCdbMDBdIEJhY2sgdG8gbWFpbiBtZW51JykKICBwcmludCgnWzk5XSBFeGl0JykKICB2YXIgPSBpbnQoaW5wdXQoJ1xuPj4gJykpCiAgaWYgdmFyID09IDE6CiAgICAgb3Muc3lzdGVtKCJweXRob24zIG1vZHVsZXMvc2VhcmNoX2VuLnB5IikKICBlbGlmIHZhciA9PSAyOgogICAgIGlmIG9zLnBhdGguZXhpc3RzKCcudG9vbHMvc2hlcmxvY2snKToKICAgICAgICB1c2VyID0gaW5wdXQoJ1xuW35dIEVudGVyIHRoZSB1c2VybmFtZSB0byBzZWFyY2ggaW4gc2hlcmxvY2s6ICcpCiAgICAgICAgcHJpbnQoJyAnKQogICAgICAgIG9zLnN5c3RlbShmImNkIC50b29scy9zaGVybG9jayAmJiBweXRob24zIHNoZXJsb2NrIHt1c2VyfSIpCiAgICAgZWxzZToKICAgICAgIHByaW50KCdcblshXSBTaGVybG9jayBpcyBub3QgaW5zdGFsbGVkIScpCiAgICAgICB2YXIgPSBpbnB1dCgnWz9dIFlvdSB3YW50IHRvIGluc3RhbGwgc2hlcmxvY2sgW1kvbl06ICcpCiAgICAgICBpZiB2YXIgPT0gIlkiIG9yIHZhciA9PSAieSI6CiAgICAgICAgICBwcmludCgnXG5bfl0gSW5zdGFsbGluZyBzaGVybG9jay4uLicpCiAgICAgICAgICBvcy5zeXN0ZW0oImNkIC50b29scyAmJiBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3NoZXJsb2NrLXByb2plY3Qvc2hlcmxvY2sgJiYgY2Qgc2hlcmxvY2sgJiYgcGlwMyBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQiKQogICAgICAgICAgcHJpbnQoJ1t+XSBTaGVybG9jayBpbnN0YWxsZWQuLicpCiAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICBzaGVyKCkKICAgICAgIGVsaWYgdmFyID09ICJOIiBvciB2YXIgPT0gIm4iOgogICAgICAgICAgIHByaW50KCdcblt+XSBSZXR1cm5pbmcgdG8gdGhlIG1haW4gbWVudScpCiAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgIHNoZXIoKQogIGVsaWYgdmFyID09IDM6CiAgICAgaWYgb3MucGF0aC5leGlzdHMoJy50b29scy9uZXhmaWwnKToKICAgICAgICB1c2VyID0gaW5wdXQoJ1xuW35dIEVudGVyIHRoZSB1c2VybmFtZSB0byBzZWFyY2ggaW4gbmV4ZmlsOiAnKQogICAgICAgIHByaW50KCcgJykKICAgICAgICBvcy5zeXN0ZW0oZiJjZCAudG9vbHMvbmV4ZmlsICYmIHB5dGhvbjMgbmV4ZmlsLnB5IC11IHt1c2VyfSIpCiAgICAgZWxzZToKICAgICAgIHByaW50KCdcblshXSBOZXhmaWwgaXMgbm90IGluc3RhbGxlZCEnKQogICAgICAgdmFyID0gaW5wdXQoJ1s/XSBZb3Ugd2FudCB0byBpbnN0YWxsIG5leGZpbCBbWS9uXTogJykKICAgICAgIGlmIHZhciA9PSAiWSIgb3IgdmFyID09ICJ5IjoKICAgICAgICAgIHByaW50KCdcblt+XSBJbnN0YWxhbmRvIG5leGZpbC4uLicpCiAgICAgICAgICBvcy5zeXN0ZW0oImNkIC50b29scyAmJiBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3RoZXdoaXRlaDR0L25leGZpbCAmJiBjZCBuZXhmaWwgJiYgcGlwMyBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHQiKQogICAgICAgICAgcHJpbnQoJ1t+XSBOZXhmaWwgaW5zdGFsbGVkLicpCiAgICAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICAgICBzaGVyKCkKICAgICAgIGVsaWYgdmFyID09ICJOIiBvciB2YXIgPT0gIm4iOgogICAgICAgICAgIHByaW50KCdcblt+XSBSZXR1cm5pbmcgdG8gdGhlIG1haW4gbWVudScpCiAgICAgICAgICAgdGltZS5zbGVlcCgxKQogICAgICAgICAgIHNoZXIoKQogIGVsaWYgdmFyID09IDQ6CiAgICAgdXNlciA9IGlucHV0KCdcblt+XSBFbnRlciBhIHVzZXIgdG8gc2VhcmNoOiAnKQogICAgIG9zLnN5c3RlbShmInNvY2lhbHNjYW4ge3VzZXJ9IC0tc2hvdy11cmxzIikKICBlbGlmIHZhciA9PSAwMDoKICAgICBtZW51KCkKICBlbGlmIHZhciA9PSA5OToKICAgICBleGl0KCkKICBlbHNlOgogICAgcHJpbnQoJ1xuWyFdIEludmFsaWQgb3B0aW9uLicpCiAgICBzaGVyKCkKCmRlZiBpcGxvZygpOgogIG9zLnN5c3RlbSgiY2xlYXIiKQogIHByaW50KGxvZ28pCiAgcHJpbnQoJ1xuW35dIEVudGVyIGFuIG9wdGlvbi4uJykKICBwcmludCgnJydcbgogIFsxXSBJUGxvZ2dlci5vcmcKICAKICBbMl0gR3JhYmlmeQogIAogIFszXSBDcmVhdGUgYW4gSVBsb2dnZXIgbGluayAKICAKICBbMDBdIEJhY2sgdG8gbWFpbiBtZW51CiAgCiAgWzk5XSBFeGl0CiAgJycnKQogIG9wYyA9IGludChpbnB1dCgnPj4gJykpCiAgaWYgb3BjID09IDE6CiAgICBwcmludCgnXG5bMV0gT3BlbiBsaW5rIGZvciBsaW51eCcpCiAgICBwcmludCgnXG5bMl0gT3BlbiBsaW5rIGZvciB0ZXJtdXgnKQogICAgcHJpbnQoJ1xuWzAwXSBCYWNrIHRvIG1haW4gbWVudScpCiAgICBwcmludCgnXG5bOTldIEV4aXQnKQogICAgU2tkID0gaW50KGlucHV0KCc+PiAnKSkKICAgIGlmIFNrZCA9PSAxOgogICAgICB3ZWJicm93c2VyLm9wZW4oJ2h0dHBzOi8vaXBsb2dnZXIub3JnL2VzLycpCiAgICAgIGlwbG9nKCkKICAgIGVsaWYgU2tkID09IDI6CiAgICAgIG9zLnN5c3RlbSgidGVybXV4LW9wZW4gaHR0cHM6Ly9pcGxvZ2dlci5vcmcvZXMvIikKICAgICAgaXBsb2coKQogICAgZWxpZiBTa2QgPT0gMDA6CiAgICAgIGlwbG9nKCkKICAgIGVsaWYgU2tkID09IDk5OgogICAgICBleGl0KCkKICAgIGVsc2U6CiAgICAgIHByaW50KCdbfl0gSW52YWxpZCBvcHRpb24uJykKICAgICAgdGltZS5zbGVlcCgyKQogICAgICBpcGxvZygpCiAgZWxpZiBvcGMgPT0gMjoKICAgIHByaW50KCdcblsxXSBPcGVuIGxpbmsgZm9yIGxpbnV4JykKICAgIHByaW50KCdcblsyXSBPcGVuIGxpbmsgZm9yIHRlcm11eCcpCiAgICBwcmludCgnXG5bMDBdIEJhY2sgdG8gbWFpbiBtZW51JykKICAgIHByaW50KCdcbls5OV0gRXhpdCcpCiAgICBMQSA9IGludChpbnB1dCgnPj4gJykpCiAgICBpZiBMQSA9PSAxOgogICAgICB3ZWJicm93c2VyLm9wZW4oJ2h0dHBzOi8vZ3JhYmlmeS5saW5rLycpCiAgICAgIGlwbG9nKCkKICAgIGVsaWYgTEEgPT0gMjoKICAgICAgb3Muc3lzdGVtKCJ0ZXJtdXgtb3BlbiBodHRwczovL2dyYWJpZnkubGluay8iKQogICAgICBpcGxvZygpCiAgICBlbGlmIExBID09IDAwOgogICAgICBpcGxvZygpCiAgICBlbGlmIExBID09IDk5OgogICAgICBleGl0KCkKICAgIGVsc2U6CiAgICAgIHByaW50KCdbfl0gSW52YWxpZCBvcHRpb24uJykKICAgICAgdGltZS5zbGVlcCgyKQogICAgICBpcGxvZygpCiAgZWxpZiBvcGMgPT0gMzoKICAgIHByaW50KGYnXG57Q29sb3Jlcy52ZXJkZX1bfl0gSVAgd2lsbCBiZSBzYXZlZCBpbjogRG94eGVyLVRvb2xraXQvLnBhZ2VzL2VuX3BhZ2VzL0lQbG9nZ2VyL2lwLnR4dCcpCiAgICBwcmludChmJ1xue0NvbG9yZXMuYW1hcmlsbG99W35dIFlvdSBjYW4gdmlldyB0aGUgSVAgQUREUkVTU0VTIHdpdGggdGhlIGNvbW1hbmQ6IGNhdCBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvZW5fcGFnZXMvSVBsb2dnZXIvaXAudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy5tYWdlbnRhfVt+XSBUbyBleGl0IHByZXNzIENUUkwgKyBDJykKICAgIHByaW50KCcgJykKICAgIGNtZCA9ICJwaHAgLXQgLnBhZ2VzL2VuX3BhZ2VzL0lQbG9nZ2VyIC1TIGxvY2FsaG9zdDo4MDgwICYgc3NoIC1SIDgwOmxvY2FsaG9zdDo4MDgwIG5va2V5QGxvY2FsaG9zdC5ydW4iCiAgICBwID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUpCiAgICBhID0gcC5jb21tdW5pY2F0ZSgpWzBdCiAgZWxpZiBvcGMgPT0gMDA6CiAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgIG1lbnUoKQogIGVsaWYgb3BjID09IDk5OgogICAgZXhpdCgpCiAgZWxzZToKICAgIHByaW50KCdbfl0gSW52YWxpZCBvcHRpb24uJykKICAgIHRpbWUuc2xlZXAoMikKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcHJpbnQobG9nbykKICAgIGlwbG9nKCkKICAKZGVmIGZha2VycigpOgogIHByaW50KGYnJyd7Q29sb3Jlcy5yZWR9XG4KICBbMV0gR2VuZXJhdGUgZmFrZSBpcHY0CiAgCiAgWzJdIEdlbmVyYXRlIGZha2UgcGhvbmUgbnVtYmVyCiAgCiAgWzNdIEdlbmVyYXRlIHByb2ZpbGUgb2YgYSBmYWtlIHBlcnNvbgogIAogIFs0XSBHZW5lcmF0ZSBVc2VyLUFnZW50cwoKICBbNV0gR2VuZXJhdGUgZmFrZSBDcmVkaXQgY2FyZAogICAgCiAgWzAwXSBCYWNrIHRvIG1haW4gbWVudQogIAogIFs5OV0gRXhpdAogICcnJykKICBmYWtrID0gaW50KGlucHV0KCc+PiAnKSkKICBpZiBmYWtrID09IDE6CiAgICBwcmludCgnXG5bfl0gR2VuZXJhdGluZyBhIGZha2UgaXB2NC4uLicpCiAgICB0aW1lLnNsZWVwKDIpCiAgICBpcCA9ICIuIi5qb2luKG1hcChzdHIsIChyYW5kb20ucmFuZGludCgwLCAyNTUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgXyBpbiByYW5nZSg0KSkpKQogICAgcHJpbnQoZid7Q29sb3Jlcy52ZXJkZX1bfl0gSVAgR2VuZXJhdGVkOiB7aXB9JykgCiAgICBmYWtlcnIoKQogIGVsaWYgZmFrayA9PSAyOgogICAgZmFrZSA9IEZha2VyKCkKICAgIEZha2VyLnNlZWQoMCkKICAgIHByaW50KCdbfl0gSG93IG1hbnkgdGltZXMgZG8geW91IHdhbnQgdG8gZ2VuZXJhdGUgYSBmYWtlIG51bWJlcj8nKQogICAgbnVtID0gaW50KGlucHV0KCdbfl0gRW50ZXIgYSBudW1iZXI6ICcpKQogICAgcHJpbnQoJ1t+XSBHZW5lcmF0aW5nIGZha2UgcGhvbmUgbnVtYmVyLi4uJykKICAgIHRpbWUuc2xlZXAoMSkKICAgIGZvciBfIGluIHJhbmdlKG51bSk6CiAgICAgIHByaW50KGZha2UucGhvbmVfbnVtYmVyKCkpCiAgICBmYWtlcnIoKQogIGVsaWYgZmFrayA9PSAzOgogICAgZmFrZSA9IEZha2VyKCkKICAgIEZha2VyLnNlZWQoMCkKICAgIHByaW50KCdbfl0gSG93IG1hbnkgdGltZXMgZG8geW91IHdhbnQgdG8gZ2VuZXJhdGUgYSBmYWtlIHByb2ZpbGU/JykKICAgIG51bSA9IGludChpbnB1dCgnW35dIEVudGVyIGEgbnVtYmVyOiAnKSkKICAgIHByaW50KCdbfl0gR2VuZXJhdGluZyBhIGZha2UgcHJvZmlsZS4uLicpCiAgICB0aW1lLnNsZWVwKDEpCiAgICBmb3IgXyBpbiByYW5nZShudW0pOgogICAgICBwcmludChmYWtlLnByb2ZpbGUoKSkKICAgIGZha2VycigpCiAgZWxpZiBmYWtrID09IDQ6CiAgICBmYWtlID0gRmFrZXIoKQogICAgRmFrZXIuc2VlZCgwKQogICAgcHJpbnQoJ1t+XSBIb3cgbWFueSB0aW1lcyBkbyB5b3Ugd2FudCB0byBnZW5lcmF0ZSBhIHVzZXItYWdlbnQ/JykKICAgIG51bSA9IGludChpbnB1dCgnW35dIEVudGVyIGEgbnVtYmVyOiAnKSkKICAgIHByaW50KCdbfl0gR2VuZXJhdGluZyBhIHVzZXItYW5nZXQuLi4nKQogICAgdGltZS5zbGVlcCgxKQogICAgZm9yIF8gaW4gcmFuZ2UobnVtKToKICAgICAgcHJpbnQoZmFrZS51c2VyX2FnZW50KCkpCiAgICBmYWtlcnIoKQogIGVsaWYgZmFrayA9PSA1OgogICAgZmFrZSA9IEZha2VyKCkKICAgIEZha2VyLnNlZWQoMCkKICAgIHByaW50KCdbfl0gSG93IG1hbnkgdGltZXMgZG8geW91IHdhbnQgdG8gZ2VuZXJhdGUgYSBjcmVkaXQgY2FyZD8nKQogICAgbnVtID0gaW50KGlucHV0KCdbfl0gRW50ZXIgYSBudW1iZXI6ICcpKQogICAgcHJpbnQoJ1t+XSBHZW5lcmF0aW5nIGEgZmFrZSBjcmVkaXQgY2FyZC4uLicpCiAgICB0aW1lLnNsZWVwKDEpCiAgICBmb3IgXyBpbiByYW5nZShudW0pOgogICAgICBwcmludChmYWtlLmNyZWRpdF9jYXJkX2Z1bGwoKSkKICAgIGZha2VycigpCiAgZWxpZiBmYWtrID09IDAwOgogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBtZW51KCkKICBlbGlmIGZha2sgPT0gOTk6CiAgICBleGl0KCkKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBJbnZhbGlkIG9wdGlvbi4nKQogICAgdGltZS5zbGVlcCgyKQogICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICBwcmludChsb2dvKQogICAgZmFrZXJyKCkKCmRlZiBnZW9pcCgpOgogIHByaW50KCdcblsxXSBHZW9sb2NhdGUgSVAnKQogIHByaW50KCdcblswMF0gQmFjayB0byBtYWluIG1lbnUnKQogIHByaW50KCdcbls5OV0gRXhpdCcpCiAgTUMgPSBpbnQoaW5wdXQoJ1xuPj4gJykpCiAgaWYgTUMgPT0gMToKICAgICAgICBvcy5zeXN0ZW0oZiJjZCAuZ2VvICYmIHB5dGhvbjMg'
love = ''
god = ''
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
